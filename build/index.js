!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=16)}([function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var i=(s=r,a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),p="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(p," */")),o=r.sources.map(function(t){return"/*# sourceURL=".concat(r.sourceRoot).concat(t," */")});return[n].concat(o).concat([i]).join("\n")}var s,a,p;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2],"{").concat(n,"}"):n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];null!=o&&(r[o]=!0)}for(var s=0;s<t.length;s++){var a=t[s];null!=a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="(".concat(a[2],") and (").concat(n,")")),e.push(a))}},e}},function(t,e,n){var r,i,o={},s=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),a=function(t,e){return e?e.querySelector(t):document.querySelector(t)},p=function(t){var e={};return function(t,n){if("function"==typeof t)return t();if(void 0===e[t]){var r=a.call(this,t,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}}(),l=null,c=0,h=[],d=n(4);function u(t,e){for(var n=0;n<t.length;n++){var r=t[n],i=o[r.id];if(i){i.refs++;for(var s=0;s<i.parts.length;s++)i.parts[s](r.parts[s]);for(;s<r.parts.length;s++)i.parts.push(w(r.parts[s],e))}else{var a=[];for(s=0;s<r.parts.length;s++)a.push(w(r.parts[s],e));o[r.id]={id:r.id,refs:1,parts:a}}}}function g(t,e){for(var n=[],r={},i=0;i<t.length;i++){var o=t[i],s=e.base?o[0]+e.base:o[0],a={css:o[1],media:o[2],sourceMap:o[3]};r[s]?r[s].parts.push(a):n.push(r[s]={id:s,parts:[a]})}return n}function m(t,e){var n=p(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=h[h.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),h.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=p(t.insertAt.before,n);n.insertBefore(e,i)}}function f(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=h.indexOf(t);e>=0&&h.splice(e,1)}function b(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return n.nc}();r&&(t.attrs.nonce=r)}return x(e,t.attrs),m(t,e),e}function x(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function w(t,e){var n,r,i,o;if(e.transform&&t.css){if(!(o="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=o}if(e.singleton){var s=c++;n=l||(l=b(e)),r=k.bind(null,n,s,!1),i=k.bind(null,n,s,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",x(e,t.attrs),m(t,e),e}(e),r=E.bind(null,n,e),i=function(){f(n),n.href&&URL.revokeObjectURL(n.href)}):(n=b(e),r=C.bind(null,n),i=function(){f(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=s()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=g(t,e);return u(n,e),function(t){for(var r=[],i=0;i<n.length;i++){var s=n[i];(a=o[s.id]).refs--,r.push(a)}t&&u(g(t,e),e);for(i=0;i<r.length;i++){var a;if(0===(a=r[i]).refs){for(var p=0;p<a.parts.length;p++)a.parts[p]();delete o[a.id]}}}};var v,y=(v=[],function(t,e){return v[t]=e,v.filter(Boolean).join("\n")});function k(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=y(e,i);else{var o=document.createTextNode(i),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(o,s[e]):t.appendChild(o)}}function C(t,e){var n=e.css,r=e.media;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function E(t,e,n){var r=n.css,i=n.sourceMap,o=void 0===e.convertToAbsoluteUrls&&i;(e.convertToAbsoluteUrls||o)&&(r=d(r)),i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var s=new Blob([r],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}},function(t,e,n){var r=n(3);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(1)(r,i);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,":root {\r\n  /* --cap-image : url(https://www.webfx.com/tools/emoji-cheat-sheet/graphics/emojis/coffee.png); */\r\n  --cap-image : url(https://garevna.github.io/js-samples/icons/cap.png);\r\n  /* --link-image: url(https://garevna.github.io/js-samples/icons/link.png); */\r\n\r\n  --back-color: #ffffff90;\r\n  --menu-back-color: #fa0;\r\n  --submenu-back-color: #09b;\r\n  --back-transparent: #ffffff00;\r\n  --menu-color: #09b;\r\n  --submenu-color: #09b;\r\n  --menu-color-hover: #000;\r\n  --submenu-color-hover: #000;\r\n  --selected-lesson-color: #fff;\r\n  --header-back-color: linear-gradient(to right, #00000000, #00000050 30%, #000000 40%, #000 );\r\n  --header-back-image: url(https://cdn.glitch.com/a4e0a9fd-ea7b-47cf-b52a-48fd6359c559%2Fstars-5.gif);\r\n\r\n  /*--icon:       url(../src/images/cat.gif);*/\r\n  --icon:       url(https://cdn.glitch.com/a4e0a9fd-ea7b-47cf-b52a-48fd6359c559%2Fpersonage-to-right.gif);\r\n  --search:     url(https://www.webfx.com/tools/emoji-cheat-sheet/graphics/emojis/mag.png);\r\n  --link-image: url(https://garevna.github.io/js-samples/icons/link-ico.png);\r\n\r\n  --button-gradient-0: linear-gradient(to right, #09b, #09b, #09b);\r\n  --button-gradient-1: linear-gradient(to right top, #09b, #5bd 10% 30%, #09b);\r\n  --button-gradient-2: linear-gradient(to right top, #09b, #5bd 30% 50%, #09b);\r\n  --button-gradient-3: linear-gradient(to right top, #09b, #5bd 50% 70%, #09b);\r\n  --button-gradient-4: linear-gradient(to right top, #09b, #5bd 70% 90%, #09b);\r\n  --button-gradient-5: linear-gradient(to right top, #09b, #5bd 40% 50%, #09b);\r\n  --main-menu-item-height: 20px;\r\n  --main-font: 'Poppins', 'Montserrat', 'Roboto', Arial;\r\n  --funy-font: 'Luckiest Guy', 'Montserrat', 'Roboto', Arial;\r\n}\r\n\r\nbody {\r\n  margin: 20px calc(50% - 450px);\r\n  font-family: \"Poppins\", Arial;\r\n  color: #555;\r\n  background-color: white;\r\n  border: solid 20px white;\r\n  border-bottom: solid 70px white;\r\n  overflow-x: hidden;\r\n}\r\n\r\nhtml {\r\n    background: #555;\r\n    scroll-behavior: smooth;\r\n}\r\n\r\nhr {\r\n  margin: 32px 0;\r\n  height: 1px;\r\n  border-top: solid 1px #f50;\r\n  border-bottom: solid 1.2px #09b;\r\n  background: transparent;\r\n}\r\n\r\n/* ===============  main-menu-component  =============== */\r\n\r\nmain-menu-component {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 50px;\r\n    background: var(--header-back-image), var(--header-back-color);\r\n    background-size: 30%, 100%;\r\n    background-repeat: repeat-x, no-repeat;\r\n    background-blend-mode: overlay;\r\n    box-shadow: 2px 2px 4px #00000090;\r\n    z-index: 55;\r\n}\r\n\r\nmain-menu-component:before {\r\n    content: \"Client-side JS\";\r\n    font-family: \"Luckiest Guy\";\r\n    color: #def;\r\n    display: block;\r\n    padding: 8px 16px;\r\n    font-size: 30px;\r\n    mix-blend-mode: difference;\r\n    -moz-letter-spacing: 2;\r\n    -webkit-letter-spacing: 2;\r\n    letter-spacing: 2;\r\n}\r\n\r\npopup-win img {\r\n  border: 0;\r\n}\r\npopup-win h3 {\r\n  color: #dde;\r\n}\r\n\r\n@media screen and (min-width: 1300px) {\r\n  main-menu-component:before {\r\n    padding-left: 16px;\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 1280px) {\r\n  main-menu-component:before {\r\n    padding-left: 20vw;\r\n  }\r\n}\r\n@media screen and (max-width: 900px) {\r\n  body {\r\n    margin: 0;\r\n  }\r\n  glitch-logo { display: none; }\r\n  popup-win { display: none; }\r\n\r\n  main-menu-component:before {\r\n    padding-left: 80px;\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 480px), screen and (max-height: 480px) {\r\n    main-menu-component {\r\n      background: transparent;\r\n      box-shadow: none;\r\n    }\r\n    main-menu-component:before {\r\n      display: none;\r\n    }\r\n}\r\n\r\n\r\n/* ===== glitch logo ===== */\r\n\r\nglitch-logo {\r\n    position: absolute;\r\n    top: 70px;\r\n    left: calc(100% - 150px);\r\n}\r\n\r\n\r\nmenu-component {\r\n    position: fixed;\r\n    top: 8px;\r\n    z-index: 500;\r\n    cursor:pointer;\r\n}\r\n\r\n.close-button {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  background: transparent;\r\n  border: 0;\r\n  outline: none;\r\n  cursor: pointer;\r\n}\r\n.close-button:before {\r\n  content: \"\";\r\n  background-size: contain;\r\n  background-image: url(https://www.webfx.com/tools/emoji-cheat-sheet/graphics/emojis/no_entry_sign.png);\r\n  width:30px;\r\n  height:30px;\r\n}\r\n.close-button:hover:before {\r\n  background-blend-mode: difference;\r\n}\r\n\r\n::-webkit-scrollbar {\r\n  width: 5px;\r\n  height: 5px;\r\n}\r\n\r\n::-webkit-scrollbar-track {\r\n  background: #079;\r\n  box-shadow: inset 0 0 1px #00000070;\r\n  border-radius: 1px;\r\n}\r\n\r\n::-webkit-scrollbar-thumb {\r\n  background: #f50;\r\n  border-radius: 1px;\r\n}\r\n\r\n::-webkit-scrollbar-thumb:hover {\r\n  background: #fa0;\r\n}\r\n",""])},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var i,o=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?t:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(t,e,n){var r=n(6);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(1)(r,i);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,'/* Rainbow */\r\n\r\n@keyframes fade-in{0%{opacity:0}100%{opacity:1}}@keyframes fade{10%{transform:scale(1, 1)}35%{transform:scale(1, 1.7)}40%{transform:scale(1, 1.7)}50%{opacity:1}60%{transform:scale(1, 1)}100%{transform:scale(1, 1);opacity:0}}[data-language] code,[class^="lang"] code,pre [data-language],pre [class^="lang"]{opacity:0;-ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=100)";animation:fade-in 50ms ease-in-out 2s forwards}[data-language] code.rainbow,[class^="lang"] code.rainbow,pre [data-language].rainbow,pre [class^="lang"].rainbow{animation:none;transition:opacity 50ms ease-in-out}[data-language] code.loading,[class^="lang"] code.loading,pre [data-language].loading,pre [class^="lang"].loading{animation:none}[data-language] code.rainbow-show,[class^="lang"] code.rainbow-show,pre [data-language].rainbow-show,pre [class^="lang"].rainbow-show{opacity:1}pre{position:relative}pre.loading .preloader div{animation-play-state:running}pre.loading .preloader div:nth-of-type(1){background:#0081f5;animation:fade 1.5s 300ms linear infinite}pre.loading .preloader div:nth-of-type(2){background:#5000f5;animation:fade 1.5s 438ms linear infinite}pre.loading .preloader div:nth-of-type(3){background:#9000f5;animation:fade 1.5s 577ms linear infinite}pre.loading .preloader div:nth-of-type(4){background:#f50419;animation:fade 1.5s 715ms linear infinite}pre.loading .preloader div:nth-of-type(5){background:#f57900;animation:fade 1.5s 853ms linear infinite}pre.loading .preloader div:nth-of-type(6){background:#f5e600;animation:fade 1.5s 992ms linear infinite}pre.loading .preloader div:nth-of-type(7){background:#00f50c;animation:fade 1.5s 1130ms linear infinite}pre .preloader{position:absolute;top:12px;left:10px}pre .preloader div{width:12px;height:12px;border-radius:4px;display:inline-block;margin-right:4px;opacity:0;animation-play-state:paused;animation-fill-mode:forwards}pre{background-color:#000;word-wrap:break-word;margin:0px;padding:10px;color:#fff;font-size:14px;margin-bottom:20px}pre,code{font-family:\'Monaco\', \'Menlo\', courier, monospace}pre,code{font-family:monospace}pre{background-color:#fff;color:#000;font-size:13px;line-height:16px}pre .comment{color:#888}pre .support{color:#cd57d5}pre .constant.numeric,pre .php.embedded{color:#fa0002;font-weight:bold}pre .keyword,pre .constant.language{color:#000789;font-weight:bold}pre .selector,pre .support.property,pre .entity.name.function{color:#000}pre .storage.function,pre .variable.self,pre .support.function,pre .constant.language{color:#000;font-weight:bold}pre .string{color:#0d43fa;font-weight:normal}pre .css-property+span,pre .keyword.unit,pre .support.css-value{color:#0d43fa !important;font-weight:normal !important}pre .entity.tag.style+.string,pre .php.embedded .constant.language,pre .php.embedded .keyword{color:#37a348 !important}pre .support.method{color:#2bd5bb}pre .entity.name{color:#fd74e0}pre .support.css-property,pre .support.tag-name,pre .support.tag,pre .support.attribute,pre .support.attribute+.operator{color:#000789}pre .storage.module,pre .storage.class{color:#122573;font-weight:bold}pre .css.embedded .support.tag,pre .css.embedded .style.tag{color:#cd57d5}pre .keyword.operator{color:#2852eb;font-weight:normal}pre .php.embedded .variable,pre .php.embedded .storage.function{color:#0d43fa;font-weight:normal}pre .php.embedded .string,pre .js.embedded .tag.script{color:#c4001e}pre .php.embedded .comment{color:#f4b441;font-weight:normal}pre .php.embedded .function.name{color:#000;font-weight:normal}\r\n\r\npre {\r\n    box-shadow: 0 0 5px #00000050;\r\n    border: solid 20px transparent;\r\n    border-top-width: 10px;\r\n    border-bottom-width: 10px;\r\n    margin: 20px 10px 20px 2px;\r\n    padding: 0 5px 10px 0;\r\n    overflow: auto;\r\n}\r\n\r\npre .storage.function, pre .variable.self,\r\npre .support.function, pre .constant.language {\r\n    color: darkorchid;\r\n    font-weight: bold;\r\n}\r\n\r\npre .storage.type {\r\n  color: firebrick;\r\n}\r\n\r\npre .entity.name.function {\r\n    color: rgb(7, 119, 7);\r\n}\r\n\r\ncode {\r\n    font-size: 14px;\r\n    line-height: 1.8;\r\n}\r\n\r\ntd {\r\n  border: solid 1px #eef;\r\n  padding: 5px 10px;\r\n}\r\n',""])},function(module,__webpack_exports__,__webpack_require__){"use strict";class PageComponent extends HTMLElement{constructor(){super(),this.fragments={},this.pageContent="",this.pageContentList=[],this.main=this.appendChild(document.createElement("main")),this.appendChild(document.createElement("footer")).innerHTML+='\n    <br><br><br><br><br><br>\n    <figure class="overshadow">\n      <div class="overshadow__shadow">\n        <div class="overshadow__text">&nbsp;</div>\n      </div>\n    </figure>',this.menu=document.getElementsByTagName("menu-component")[0]}connectedCallback(){let t=location.pathname.split("/js-lessons").join(""),e=location.search?location.search.slice(1):"/"===t?"start-page":location.pathname.slice(1),n=`${createPath("lessons",e)}.md`;this.setAttribute("src",n),this.styleSheet=this.appendChild(document.createElement("style")),Promise.all([fetch(createPath("src","for-rainbow.css")).then(t=>t.text()),fetch(createPath("src","page.css")).then(t=>t.text()),fetch(createPath("src","icons.css")).then(t=>t.text())]).then(t=>this.styleSheet.textContent+=t.join(String.fromCharCode(10)))}static get observedAttributes(){return["src"]}attributeChangedCallback(t,e,n){this.fragments={},this.pageContent="",this.pageContentList=[],this.main.innerHTML="",this.menu.setAttribute("options",""),this.getData(n)}getData(t){fetch(t).then(t=>t.text().then(t=>this.parsePageContent(t)))}parseTextFragment(t){(t.length?t.split("\n"):[]).forEach(t=>t.length?this.main.appendChild(this.parseLine(t)):null)}parsePageContent(t){this.main.innerHTML="",this.pageContent=t,this.parseTables(),this.regExprs.pageContent=this.pageContent,this.fragments={};for(let t of this.regExprs)Object.assign(this.fragments,t);this.pageContent=this.fragments.pageContent,delete this.fragments.pageContent;let e=this.pageContent.match(/!!!.[^!!!]+!!!/g);e&&e.forEach(t=>{let e=this.pageContent.split(t);for(t=t.slice(3,-3);e.length>1;){let n=e.shift();this.parseTextFragment(n),this[`create${this.fragments[t].type}`](this.fragments[t].content)}this.pageContent=e.join("")}),this.pageContent.length&&this.parseTextFragment(this.pageContent),this.menu.setAttribute("options",JSON.stringify(this.pageContentList)),this.pageContent=this.createTables(this.pageContent),document.querySelector("page-element").querySelectorAll("div","pre").forEach(t=>t.innerHTML.trim()?this.insertTable(t):t.remove())}insertTable(t){let e=t.innerHTML.match(/\[{3}\d\]{3}/);e&&(t.innerHTML="",t.appendChild(this.createTable(e[0].slice(3,-3))))}parseTables(){let t,e,n,r=this.pageContent.split("\n");this.tables=[];const i=function(t){return this.pageContent=this.pageContent.split(t).join(`[[[${this.tables.length}]]]`),this.tables.push([]),this.tables[this.tables.length-1]}.bind(this),o=function(){for(e=r.shift(),(n=e.match(/(^\|)(.)*\|/gm))&&(t=i(e));n;)t.push(n[0].slice(1,-1)),this.pageContent=this.pageContent.split(e).join(""),e=r.shift(),n=e.match(/(^\|)(.)*\|/);r.length&&o(r)}.bind(this);o()}createTables(t){let e=this.pageContent.match(/\[{3}\d\]{3}/gm);e&&e.forEach(t=>this.pageContent.split(t).join(this.createTable(parseInt(t.slice(3,-3))).innerHTML))}createTable(t){let e=document.createElement("table");for(let n of this.tables[t]){let t=e.appendChild(document.createElement("tr"));n.split("|").forEach(e=>t.appendChild(document.createElement("td")).innerHTML=this.parseLine(e.trim()).outerHTML)}return e}createSlider(t){let e=this.main.appendChild(document.createElement("button"));e.className="slider-button",e.onclick=function(e){this.main.appendChild(document.createElement("picture-slider")).setAttribute("pictures",JSON.stringify(t.slice(3,-1).split(",")))}.bind(this)}createCodeComponent(t){let e=t.slice(4,t.search(String.fromCharCode(10))),n=this.main.appendChild(document.createElement("code-snippet"));n.textContent=t.slice(4+e.length,t.length-4),n.setAttribute("header",e),n.setAttribute("lang",e),this.main.appendChild(n)}createScriptSpoiler(t){let e=t.slice(4,t.search(String.fromCharCode(10))),n=this.main.appendChild(document.createElement("script-spoiler")),r=this.main.appendChild("console"===e.trim()?this.createConsoleOutput(t.slice(1,-1)):this.createCodeSnippet(t.slice(4+e.length,t.length-4),e));n.setAttribute("header",e),n.content=r,n.setAttribute("content","ready")}createScriptSnippet(t){let e=t.slice(3,t.search(String.fromCharCode(10)));return this.main.appendChild("console"===e.trim()?this.createConsoleOutput(t):this.createCodeSnippet(t.slice(3+e.length,t.length-3),e))}createConsoleOutput(t){let e=document.createElement("pre");return e.textContent=t.slice(10,t.length-3),e.className="black",e}createCodeSnippet(t,e){var n=document.createElement("div");return n.innerHTML=`<pre><code data-language=${e}>${t.trim()}</code></pre>`,Rainbow.color(n),Array.from(document.getElementsByClassName("preloader")).forEach(t=>t.remove()),n}createCodeOutput(t){this.main.appendChild(document.createElement("code-output")).setAttribute("script",t.slice(3,-3))}createSpoiler(t){let e=document.createElement("spoiler-component");this.main.appendChild(e);let n=t.match(/(\^{3})\[(.+)\]/)[0];e.setAttribute("header",n.slice(4,-1)),e.content=[];const r=function(t){return t.indexOf("!!!")<0?null:this.fragments[t.slice(3,-3)]}.bind(this),i=function(t){if("ScriptSnippet"!==t.type)return null;let n=t.content.slice(3,t.content.search(String.fromCharCode(10))),r=this.main.appendChild("console"===n.trim()?this.createConsoleOutput(t.content.slice(1,-1)):this.createCodeSnippet(t.content.slice(3+n.length,t.content.length-3),n));return e.content.push(r),!0}.bind(this),o=function(t){return t.match(/\[{3}\d\]{3}/)?(e.content.push(this.createTable(parseInt(t.trim().slice(3,-3)))),!0):null}.bind(this);t.split(n).join("").slice(0,-3).split("\n").forEach(t=>r(t)?i(r(t)):o(t)?null:e.content.push(this.parseLine(t))),e.setAttribute("ready","1")}parseImage(line){let string=line.match(/!\[\]\(.+\)/),url=string?line.match(/!\[\]\(.+\)/)[0].slice(4,-1):null;if(!url)return null;let elem=document.createElement("img");return elem.src=0===url.indexOf("http")?url:eval(url),elem}parseHeader(t){let e=t.match(/^[#]{1,6}/);if(!e)return{level:0,text:t};let n=t.slice(e[0].length),r=n.match(/!\[.[^\]]+\]/g);r&&r.forEach(t=>n=n.split(t).join(""));let i=n.match(/\[.[^(]+\]\(.[^\)]+\)/g);return i&&i.forEach(t=>{let e=t.split("](")[0].slice(1);n=n.split(t).join(e)}),this.main.appendChild(document.createElement("a")).name=encodeURI(n.trim()),this.pageContentList.push({level:e[0].length,text:n.trim()}),{level:e[0].length,text:t=t.split(e[0]).join("")}}parseLine(t){if(t.match(/[-_]{3,5000}/))return document.createElement("hr");let e=this.parseImage(t);if(e)return e;let{level:n,text:r}=this.parseHeader(t),i=document.createElement(n>0?`h${n}`:"div");return i.innerHTML=this.parseAnchors(r),i}parseIcons(t){let e=t.match(/!\[.[^\]]+\]/g);return e&&e.forEach(e=>{let n=document.createElement("span");e.slice(2,-1).split(" ").forEach(t=>n.classList.add(t)),t=t.split(e).join(n.outerHTML)}),t}parseAnchors(t){let e="",n=t.match(/\[.[^(]+\]\(.[^\)]+\)/g);return n?n.forEach(n=>{let r=t.split(n);e+=this.parseIcons(this.formatText(r[0]));let i=n.split("]("),o=document.createElement("a");o.href=i[1].slice(0,-1),o.setAttribute("target","_blank"),o.innerHTML=this.parseIcons(this.formatText(i[0].slice(1))),e+=o.outerHTML+r[1]}):e=this.parseIcons(this.formatText(t)),e}formatText(t){let e;return this.symbols.forEach(n=>{e=new RegExp(n.reg+".[^"+n.reg+"]+"+n.reg,"g");let r=t.match(e);r&&r.forEach(e=>t=t.split(e).join(e.replace(n.symb,n.tag[0]).replace(n.symb,n.tag[1])))}),t}createGrid(t){let e=this.main.appendChild(document.createElement("div"));e.className="grid",t.slice(4,-4).split("\n").forEach(t=>e.appendChild(this.parseLine(t)))}}PageComponent.prototype.regExprs={CodeOutput:/\{{3}.[^}]*\}{3}/,ScriptSpoiler:/~~~~.[^~~~~]+~~~~/,ScriptSnippet:/~~~.[^~~~]+~~~/,Spoiler:/(\^{3})([\s\S]+?)\1/m,Slider:/!!\[.[^\]]+\]/,Grid:/\@\@\@\@\s+\S+[^\@\@\@\@]*]*\@\@\@\@/m},PageComponent.prototype.regExprs[Symbol.iterator]=function*(){let t,e,n,r,i=Object.keys(this);for(;i.length;)if(t=!0,"pageContent"!==(r=i.shift()))for(;t&&(t=this.pageContent.match(this[r]));)n=(e=t.index)+t[0].length+1,this.pageContent=this.pageContent.replace(t[0],`\n!!!${e}!!!\n`),yield{[e]:{type:r,content:t[0]}};yield{pageContent:this.pageContent}},PageComponent.prototype.symbols=[{symb:"••",reg:"••",tag:["<figure class='black'>","</figure>"]},{symb:"◘◘",reg:"◘◘",tag:["<figure class='bordered'>","</figure>"]},{symb:"**",reg:"\\*\\*",tag:["<b>","</b>"]},{symb:"_",reg:"_",tag:["<em>","</em>"]},{symb:"~",reg:"~",tag:["<code style='background-color:#eef'>","</code>"]},{symb:"^^",reg:"\\^\\^",tag:["<small>","</small>"]},{symb:":::",reg:":::",tag:["<button class='cap'>","</button>"]},{symb:"%%%",reg:"%%%",tag:["<button class='link'>","</button>"]}],customElements.define("page-element",PageComponent);var _unused_webpack_default_export=PageComponent},function(module,__webpack_exports__,__webpack_require__){"use strict";class CodeOutput extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"closed"}),this.shadow.innerHTML="\n          <style>\n            * { outline: none; }\n            section {\n              position: relative;\n              height: 300px;\n              padding: 20px;\n              box-sizing: border-box;\n              box-shadow: inset 2px 2px 4px #00000070;\n              background: #000;\n              color: #dde;\n              overflow-x: hidden;\n              overflow-y: auto;\n            }\n            button {\n              background: linear-gradient(to right, #09b, #09b, #09b);\n              padding: 10px 20px;\n              font-family: Mali, Montserrat, Arial;\n              font-size: 1.2rem;\n              border:0;\n              color: white;\n              box-shadow: 1px 1px 2px #00000070;\n            }\n\n            button:hover {\n              animation: button-hover 0.2s ease alternate 2;\n              box-shadow: 0px 0px 2px #00000050;\n              text-shadow: 1px 1px 1px #005577de;\n            }\n\n            @keyframes button-hover {\n                0% { background: linear-gradient(to right top, #09b,#09b, #09b); }\n               20% { background: linear-gradient(to right top, #09b, #5bd 10% 30%, #09b); }\n               40% { background: linear-gradient(to right top, #09b, #5bd 30% 50%, #09b); }\n               60% { background: linear-gradient(to right top, #09b, #5bd 50% 70%, #09b); }\n               80% { background: linear-gradient(to right top, #09b, #5bd 70% 90%, #09b); }\n              100% { background: linear-gradient(to right top, #09b, #09b, #09b); }\n\n            }\n            ::-webkit-scrollbar {\n              width: 5px;\n              height: 5px;\n            }\n\n            ::-webkit-scrollbar-track {\n              background: #079;\n              box-shadow: inset 0 0 1px #00000070;\n              border-radius: 1px;\n            }\n\n            ::-webkit-scrollbar-thumb {\n              background: #f50;\n              border-radius: 1px;\n            }\n\n            ::-webkit-scrollbar-thumb:hover {\n              background: #fa0;\n            }\n          </style>\n          <button>Start</button>\n          <section>\n          </section>\n        ",this.button=this.shadow.querySelector("button"),this.section=this.shadow.querySelector("section")}connectedCallback(){}static get observedAttributes(){return["script"]}attributeChangedCallback(attrName,oldVal,newVal){fetch(`${createPath("lessons",newVal)}`).then(t=>t.text()).then(response=>{response=response.replace(/document.body/g,"this.section"),response=response.replace(/document.head/g,"this.section");let stopHandler=function(t){t.target.innerText="Start",t.target.onclick=startHandler,this.section.stop=!0,this.section.innerHTML=""}.bind(this),startHandler=function(event){event.target.innerText="stop",event.target.onclick=stopHandler,this.section.stop=!1,eval(response)}.bind(this);this.button.onclick=startHandler})}}customElements.define("code-output",CodeOutput);var _unused_webpack_default_export=CodeOutput},function(t,e,n){var r=n(10);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(1)(r,i);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,".maket-01 {\r\n  background-image: url(https://garevna.github.io/a-level-js-lessons/src/images/project/01.png);\r\n}\r\n.maket-02 {\r\n  background-image: url(https://garevna.github.io/a-level-js-lessons/src/images/project/02.png);\r\n}\r\n.maket-03 {\r\n  background-image: url(https://garevna.github.io/a-level-js-lessons/src/images/project/03.png);\r\n}\r\n.maket-04 {\r\n  background-image: url(https://garevna.github.io/a-level-js-lessons/src/images/project/04.png);\r\n}\r\n.maket-05 {\r\n  background-image: url(https://garevna.github.io/a-level-js-lessons/src/images/project/05.png);\r\n}\r\n.maket-06 {\r\n  background-image: url(https://garevna.github.io/a-level-js-lessons/src/images/project/06.png);\r\n}\r\n.maket-07 {\r\n  background-image: url(https://garevna.github.io/a-level-js-lessons/src/images/project/07.png);\r\n}\r\n.maket-08 {\r\n  background-image: url(https://garevna.github.io/a-level-js-lessons/src/images/project/08.png);\r\n}\r\n.maket-09 {\r\n  background-image: url(https://garevna.github.io/a-level-js-lessons/src/images/project/09.png);\r\n}\r\n.maket-10 {\r\n  background-image: url(https://garevna.github.io/a-level-js-lessons/src/images/project/10.png);\r\n}\r\n.maket-11 {\r\n  background-image: url(https://garevna.github.io/a-level-js-lessons/src/images/project/11.png);\r\n}\r\n.maket-12 {\r\n  background-image: url(https://garevna.github.io/a-level-js-lessons/src/images/project/12.png);\r\n}\r\n.maket-13 {\r\n  background-image: url(https://garevna.github.io/a-level-js-lessons/src/images/project/13.png);\r\n}\r\n.maket-14 {\r\n  background-image: url(https://garevna.github.io/a-level-js-lessons/src/images/project/14.png);\r\n}\r\n.maket-15 {\r\n  background-image: url(https://garevna.github.io/a-level-js-lessons/src/images/project/15.png);\r\n}\r\n.maket-16 {\r\n  background-image: url(https://garevna.github.io/a-level-js-lessons/src/images/project/16.png);\r\n}\r\n\r\n.maket-01, .maket-02, .maket-03, .maket-04, .maket-05, .maket-06,\r\n.maket-07, .maket-08, .maket-09, .maket-10, .maket-11, .maket-12,\r\n.maket-13, .maket-14, .maket-15, .maket-16 {\r\n    display: block;\r\n    background-repeat: no-repeat;\r\n    background-size: contain;\r\n    background-position: center center;\r\n    min-width: 320px;\r\n    max-width: 100vw;\r\n    min-height: 150px;\r\n    max-height: 30vh;\r\n    width: 320px;\r\n    height: 30vh;\r\n}\r\n\r\n.project > div > a {\r\n    display: block;\r\n    width: inherit;\r\n    height: inherit;\r\n}\r\n",""])},function(t,e,n){var r=n(12);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(1)(r,i);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,".grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));\r\n    grid-template-rows: repeat(auto-fit, minmax(50px, 1fr));\r\n    justify-items: center;\r\n    align-items: stretch;\r\n    gap: 10px;\r\n}\r\n.grid > div {\r\n    display: block;\r\n    width: max-content;\r\n    height: max-content;\r\n    padding: 0;\r\n    margin:0;\r\n}\r\n.grid > div > a {\r\n    display: block;\r\n    width: inherit;\r\n    height: inherit;\r\n}\r\n",""])},function(t,e){customElements.define("svg-nav-panel",class extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"closed"}),this.shadow.innerHTML="<svg></svg>",this.status="norm",this.maxWidth=320,this.minWidth=50,this.step=5,this.d=50,this.svg=document.querySelector("svg"),this.rand1=this.randomStep,this.rand2=this.rand1+this.randomStep,this.offset=this.randomWidth,this.addEventListener("expand",function(t){this.path.dispatchEvent(new Event(t.type))}),this.addEventListener("close",function(t){this.path.dispatchEvent(new Event(t.type))})}get w(){return window.innerWidth}get h(){return window.innerHeight}get path(){return this.shadow.querySelector("svg > path")}get randomStep(){return Math.round(Math.random()*this.h*.3)}get randomWidth(){return Math.round(Math.random()*this.maxWidth*.4)}setListeners(){this.path.addEventListener("expand",this.movie.bind(this)),this.path.addEventListener("close",this.reverse.bind(this))}setStatic(t){this.svg.style.width=t?"100vw":"0",this.status=t?"wide":"norm";let e=t?this.maxWidth:this.minWidth;this.svg.innerHTML=`<path d="M${this.w} 0 L${this.w-e} 0 L${this.w-e} ${this.h} L${this.w} ${this.h} Z" />`,this.setListeners(),this.rand1=this.randomStep,this.rand2=this.rand1+this.randomStep,this.offset=this.randomWidth}movie(){this.svg.style.width="100vw",this.d+=this.step+1,this.rand1+=4,this.rand2+=5,this.svg.innerHTML=`<path d="M${this.w} 0 L${this.w-this.minWidth-this.offset} 0 C${this.w-this.d+this.offset} ${this.rand1} ${this.w-this.d-this.offset} ${this.rand2} ${this.w-this.minWidth-2*this.offset} ${this.h} L${this.w} ${this.h} Z" />`,this.d<this.maxWidth?requestAnimationFrame(this.movie.bind(this)):this.setStatic(!0)}reverse(){this.d-=this.step+1,this.rand1+=4,this.rand2+=5,this.svg.innerHTML=`<path d="M${this.w} 0 L${this.w-this.minWidth-this.d} 0 C${this.w-this.d+this.offset} ${this.rand1} ${this.w-this.d} ${this.rand2} ${this.w-this.minWidth-this.d} ${this.h} L${this.w} ${this.h} Z" />`,this.d>0?requestAnimationFrame(this.reverse.bind(this)):this.setStatic(!1)}connectedCallback(){this.svg=this.shadow.querySelector("svg"),this.shadow.appendChild(document.createElement("style")).textContent="\n                svg {\n                  position: fixed;\n                  right: 0;\n                  top: 0;\n                  height: 100vh;\n                  width: 0;\n                  box-sizing:border-box;\n                }\n            ",this.svg.innerHTML=`<path d="M${this.w} 0 L${this.w-this.minWidth} 0 L${this.w-this.minWidth} ${this.h} L${this.w} ${this.h} Z" />`,this.setListeners(),window.addEventListener("resize",function(){this.setStatic("wide"===status)}.bind(this))}})},function(t,e,n){var r=n(15);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(1)(r,i);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"#noise-back, #noise {\r\n  position: absolute;\r\n  width: inherit;\r\n  height: inherit;\r\n  top: 0;\r\n  left: 0;\r\n  clip-path: polygon(0% 0%, 0% 0%, 0% 0%, 0% 0%);\r\n}\r\n\r\n.content:hover > #noise-back {\r\n  animation: clip-animation 0.3s infinite;\r\n}\r\n.content:hover > #noise {\r\n  animation: clip-animation 0.4s infinite;\r\n}\r\n\r\n#noise {\r\n  background-color: #f50;\r\n\r\n}\r\n\r\n#noise-back {\r\n  background-color: #09b;\r\n}\r\n\r\n@keyframes clip-animation {\r\n    0% { clip-path: polygon(0% 0%, 5% 0%, 5% 4%, 0% 4%); }\r\n    2% { clip-path: polygon(0% 8%, 10% 8%, 10% 10%, 0% 10%); }\r\n    5% { clip-path: polygon(0% 0%, 15% 0%, 15% 5%, 0% 5%); }\r\n    7% { clip-path: polygon(0% 12%, 40% 12%, 40% 15%, 0% 15%); }\r\n   10% { clip-path: polygon(0% 25%, 20% 25%, 20% 30%, 0% 30%); }\r\n   15% { clip-path: polygon(0% 88%, 20% 88%, 20% 90%, 0% 90%); }\r\n   20% { clip-path: polygon(0% 97%, 50% 97%, 50% 100%, 0% 100%); }\r\n   27% { clip-path: polygon(0% 90%, 30% 90%, 30% 92%, 0% 92%); }\r\n   30% { clip-path: polygon(0% 50%, 40% 50%, 40% 54%, 0% 54%); }\r\n   34% { clip-path: polygon(0% 43%, 40% 43%, 40% 45%, 0% 45%); }\r\n   40% { clip-path: polygon(0% 30%, 20% 30%, 20% 32%, 0% 32%); }\r\n   47% { clip-path: polygon(0% 0%, 50% 0%, 50% 3%, 0% 3%); }\r\n   50% { clip-path: polygon(0% 15%, 30% 15%, 30% 20%, 0% 20%); }\r\n   55% { clip-path: polygon(0% 17%, 40% 17%, 40% 20%, 0% 20%); }\r\n   60% { clip-path: polygon(0% 70%, 40% 70%, 40% 73%, 0% 73%); }\r\n   64% { clip-path: polygon(0% 18%, 30% 18%, 30% 20%, 0% 20%); }\r\n   70% { clip-path: polygon(0% 80%, 20% 80%, 20% 85%, 0% 85%); }\r\n   72% { clip-path: polygon(0% 74%, 20% 74%, 20% 77%, 0% 77%); }\r\n   78% { clip-path: polygon(0% 30%, 40% 30%, 40% 33%, 0% 33%); }\r\n   80% { clip-path: polygon(0% 40%, 40% 40%, 40% 44%, 0% 44%); }\r\n   90% { clip-path: polygon(0% 10%, 30% 10%, 30% 12%, 0% 12%); }\r\n  100% { clip-path: polygon(0% 84%, 35% 84%, 35% 88%, 0% 88%); }\r\n}\r\n",""])},function(t,e,n){"use strict";n.r(e);n(2),n(5);class r extends HTMLElement{constructor(){super(),this.pictures=[],this.currentIndex=0,this.currentSlide=0;let t=this.attachShadow({mode:"open"});this.container=t.appendChild(this.createElem("figure"));let e=document.createElement("style");e.textContent='\n            figure {\n                position: fixed;\n                top: 0;\n                left: 0;\n                bottom: 0;\n                right: 0;\n                overflow: hidden;\n                margin: 0;\n                z-index:500;\n                background: #00000090;\n                background-image: url(src/images/phone-static-3.jpg);\n                background-size: cover;\n                background-position: center;\n\n            }\n            button {\n              position: absolute;\n              top: 50%;\n              font-size: 50px;\n              font-weight: bold;\n              z-index: 100;\n              background: transparent;\n              border: 0;\n              color: white;\n              text-shadow: 3px 3px 5px #00000090;\n              outline: none;\n              font-family: Poppins, \'Luckiest Guy\', Roboto, Arial;\n              transition: all 0.5s;\n            }\n            button:hover {\n              transform: rotate(360deg);\n              text-shadow: 2px 2px 4px #000000b0;\n              cursor: pointer;\n            }\n            #left { left: 4%; }\n            #left:before { content: "<"; }\n            #right { right: 4%; }\n            #right:before { content: ">"; }\n            #close { top: 10px; right: 4px; }\n            #close:before {\n              content: "";\n              padding: 25px;\n              vertical-align: middle;\n              background-size: contain;\n              background-repeat: no-repeat;\n              background-position: center;\n              background-image: url(https://www.webfx.com/tools/emoji-cheat-sheet/graphics/emojis/no_entry_sign.png);\n            }\n            div {\n              position: absolute;\n              top: 5%;\n              bottom: 5%;\n              left: 5%;\n              width: 80%;\n              box-sizing: border-box;\n              margin:0;\n              background-color: #000c0d90;\n              background-repeat: no-repeat;\n              background-size: contain;\n              background-position: center center;\n              transition: all 0.8s;\n              box-shadow: inset 10px 10px 20px #00000090;\n            }\n            @media screen and (max-width:500px) {\n              button { font-size: 20px; }\n            }\n            @media screen and (max-width:360px) {\n              button { font-size: 16px; }\n            }\n        ',t.appendChild(e),this.btnClose=this.createElem("button",this.container),this.btnClose.onclick=()=>this.remove(),this.btnClose.id="close",this.btnLeft=this.createElem("button",this.container),this.btnLeft.id="left",this.btnLeft.onclick=()=>this.changePicture("left"),this.btnRight=this.createElem("button",this.container),this.btnRight.id="right",this.btnRight.onclick=()=>this.changePicture("right")}createElem(t,e){return(e||document.body).appendChild(document.createElement(t))}static get observedAttributes(){return["pictures"]}attributeChangedCallback(t,e,n){this.pictures=JSON.parse(this.getAttribute("pictures")),this.slides=[],this.slides[0]=new i(this.pictures[0],this.container),this.slides[0].mcFromTo(100,10),this.slides[1]=new i(this.pictures[1],this.container),this.slides[1].init(100)}changePicture(t){let e="left"===t?100:-100,n=0===this.currentSlide?1:0,r=this.getNextIndex(t);this.slides[n].setPicture(this.pictures[r]),this.slides[n].init(-e),this.slides[this.currentSlide].mcFromTo(10,e,0),this.slides[n].mcFromTo(-e,10,1),setTimeout(function(){this.currentSlide=n,this.currentIndex=r}.bind(this),1e3)}getNextIndex(t){return"left"===t?0===this.currentIndex?this.pictures.length-1:this.currentIndex-1:this.currentIndex===this.pictures.length-1?0:this.currentIndex+1}}customElements.define("picture-slider",r);const i=function(t,e){this.imageURL=t;let n=e.appendChild(document.createElement("div"));n.style=`background-image: url(${t});`,this.init=t=>{n.style.left=t+"%"},this.setPicture=t=>n.style.backgroundImage=`url(${t})`,this.mcFromTo=function(t,e,r){n.style.transition="none",n.style.left=t+"%",n.style.opacity=1-r,setTimeout(function(){n.style.transition="all 0.8s",n.style.left=e+"%",n.style.opacity=r},50)}};class o extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.shadow.innerHTML='\n      <link href="https://fonts.googleapis.com/css?family=Luckiest+Guy|Poppins|Roboto|Montserrat|&amp;display=swap" rel="stylesheet">\n      <link rel="stylesheet" href="src/menu.css">\n      <nav id="navigation">\n        <ul id="main-nav" class="dropdown"></ul>\n      </nav>\n      '}connectedCallback(){this.menuContent=this.shadow.getElementById("main-nav")}static get observedAttributes(){return["options"]}attributeChangedCallback(t,e,n){let r=this.shadow.querySelector(".dropdown");r.innerHTML="",n&&(this.options=JSON.parse(this.getAttribute("options")),this.setAttribute("options",""),this.options.forEach((t,e)=>{let n=r.appendChild(document.createElement("li"));n.style["animation-delay"]=e<10?`0.${e}s`:`1.${e-9}s`,n.className=`option${t.level}`;let i=n.appendChild(document.createElement("a"));i.innerHTML=t.text,i.href=`#${encodeURI(t.text)}`}))}}o.prototype.template='\n<nav id="nav" class="main-nav">\n\n  <li>\n\n\t    <ul class="dropdown"></ul>\n\n  </li>\n</nav>\n',customElements.define("menu-component",o);class s extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.shadow.appendChild(document.createElement("style")).textContent=`\n        * { box-sizing: border-box; }\n        a {\n          text-decoration: none;\n          color: #079;\n        }\n        a:hover {\n          color: #f50;\n        }\n        img {\n            max-width:98%;\n            margin: 20px 1%;\n            padding: 10px;\n            border: inset 1px white;\n            box-shadow: 2px 2px 4px #00000080;\n            box-sizing: border-box;\n        }\n        div {\n            text-align: justify;\n            margin: 16px 0;\n        }\n\n        table {\n            margin: 30px 0;\n            border-collapse: collapse;\n        }\n        td {\n            border: solid 1px #eef;\n            padding: 5px 10px;\n            text-align: center;\n        }\n\n        input[type='checkbox'] {\n            display: none;\n        }\n        .lbl-toggle {\n            margin-top: 40px;\n            display: block;\n            font-weight: bold;\n            font-family: Roboto, Arial, monospace;\n            font-size: 1.0rem;\n            text-align: right;\n            padding: 0.5rem 0.8rem;\n            color: #079;\n            box-shadow: 1px 1px 2px #00000070;\n            cursor: pointer;\n            transition: all 0.25s ease-out;\n            user-select: none;\n            background-image: url(${createPath("externalIcons","coffee.png")});\n            background-repeat: no-repeat;\n            background-size: 40px;\n            background-position: left center;\n            border-left: solid 10px transparent;\n        }\n        .lbl-toggle:hover {\n            text-shadow: 1px 1px 1.5px #00005050;\n        }\n        .lbl-toggle::before {\n            content: ' ';\n            display: inline-block;\n            border-top: 8px solid transparent;\n            border-bottom: 8px solid transparent;\n            border-left: 8px solid #ff7000;\n            vertical-align: middle;\n            margin-right: .7rem;\n            transform: translateY(-2px);\n            transition: transform .2s ease-out;\n            user-select: none;\n        }\n        .lbl-toggle::after {\n\n            width: 20px;\n            height: 20px;\n            display: inline-block;\n            background-repeat: no-repeat;\n            background-size: contain;\n            background-position: center center;\n        }\n        .collapsible-content .content-inner {\n            background-color: white;\n            color: #444;\n            box-shadow: inset 2px -2px 3px #00000090;\n            padding: .5rem 1.2rem;\n            font-size: 0.8rem;\n            overflow: auto;\n        }\n        .collapsible-content {\n            max-height: 0px;\n            overflow: auto;\n            transition: all .4s ease-in-out;\n            margin-bottom: 40px;\n            border: solid 0px transparent;\n            box-shadow: 0px 0px 0px transparent;\n        }\n        .toggle:checked + .lbl-toggle + .collapsible-content {\n            max-height: 70vh;\n            border: solid 20px transparent;\n            padding-right:10px;\n            box-shadow: 2px 2px 4px #00000080;\n        }\n        .toggle:checked + .lbl-toggle::before {\n            transform: rotate(90deg) translateX(-3px);\n        }\n        .toggle:checked + .lbl-toggle {\n            border-bottom-right-radius: 3px;\n            border-bottom-left-radius: 3px;\n        }\n\n        table {\n          margin: 30px 0;\n          border-collapse: collapse;\n        }\n        td {\n          border: solid 1px #eef;\n          padding: 2px 8px;\n        }\n        td > div {\n          margin: 0;\n          padding: 0;\n          font-size: 0.8rem;\n        }\n\n        hr {\n          margin: 30px 0;\n          border: 0;\n        }\n        hr:before {\n          content: "▗";\n          color: #f50;\n\n        }\n        hr:after {\n          content: "▘";\n          color: #09b;\n        }\n\n        ::-webkit-scrollbar {\n            width: 4px;\n            height: 4px;\n        }\n\n        .black {\n            background-color: #000;\n            color: #dde;\n            padding: 10px 15px;\n            font-family: monospace, Roboto, Arial;\n            font-size: 13px;\n        }\n\n        @media screen and (max-width: 400px), screen and (max-height: 400px) {\n          h1 { font-size: 1.2rem; }\n          h2 { font-size: 1.0rem; }\n          h3 { font-size: 0.9rem; }\n          div { font-size: 0.8rem; }\n        }\n\n        ::-webkit-scrollbar-track {\n            background: #079;\n            box-shadow: inset 0 0 1px #00000070;\n            border-radius: 1px;\n        }\n\n        ::-webkit-scrollbar-thumb {\n            background: #f50;\n            border-radius: 1px;\n        }\n\n        ::-webkit-scrollbar-thumb:hover {\n            background: #fa0;\n        }\n      `,this.shadow.innerHTML+='\n      <section id="component">\n          <div class="wrap-collabsible">\n              <input id="collapsible" class="toggle" type="checkbox">\n              <label for="collapsible" class="lbl-toggle">\n                <span id="header"></span>\n              </label>\n              <div class="collapsible-content"></div>\n          </div>\n      </section>\n      '}connectedCallback(){this.header=this.shadow.querySelector("#header"),this.script=this.shadow.querySelector("#scriptContent"),this.wrapper=this.shadow.querySelector(".collapsible-content")}}class a extends s{constructor(){super();let t=this.shadow.appendChild(document.createElement("style"));Promise.all([fetch("src/icons.css").then(t=>t.text()),fetch("src/for-rainbow.css").then(t=>t.text())]).then(e=>t.textContent=e.join("\n\n"))}connectedCallback(){this.header=this.shadow.querySelector("#header"),this.wrapper=this.shadow.querySelector(".collapsible-content"),this.shadow.querySelector(".lbl-toggle").style.backgroundImage=`url(${createPath("icons","slider-2.gif")})`}static get observedAttributes(){return["header","ready"]}attributeChangedCallback(t,e,n){t&&("header"===t?this.header.innerHTML=n:"ready"===t&&(()=>{this.content.forEach(t=>this.wrapper.appendChild(t))})())}}customElements.define("spoiler-component",a);class p extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"closed"}),this.view=document.getElementsByTagName("page-element")[0],this.course=createPath("lessons",""),this.assets=createPath("src",""),this.menuOptions=[],this.submenuOptions=[],this.state="close"}connectedCallback(){this.shadow.innerHTML+=`\n\n      <graphic-header></graphic-header>\n      <svg-nav-panel></svg-nav-panel>\n      <aside>\n        <div id="menuToggle">\n\n          <input type="checkbox" />\n          <span></span>\n          <span></span>\n          <span></span>\n          <ul id="menu">\n            <div class="search-wrapper">\n              <hr>\n              <div class="search-icon"></div>\n              <input id="search-input">\n              <div id="search-result"></div>\n            </div>\n\n            <h3><a href="${"garevna.github.io"===location.host?"/js-lessons/":"/"}" class="home">Lessons</a></h3>\n            <hr>\n          </ul>\n        </div>\n      </aside>\n      `,this.checkbox=this.shadow.querySelector('#menuToggle > input[type="checkbox"]'),this.menu=this.shadow.querySelector("#menu"),this.setStyles(),this.checkbox.onclick=function(t){this.state="close"===this.state?"expand":"close",this.menu.style["transition-delay"]="expand"===this.state?"1s":"0s",this.shadow.querySelector("svg-nav-panel").dispatchEvent(new Event(this.state))}.bind(this),this.shadow.querySelector(".home").onclick=function(t){t.preventDefault(),this.checkbox.checked=!this.checkbox.checked,this.checkbox.dispatchEvent(new Event("click")),console.log(t.target.href),"js-lessons.glitch.me"===location.host?window.history.pushState({route:t.target.href},"home",t.target.href):window.history.pushState({route:"/js-lessons/"},"home","/js-lessons/"),this.view.setAttribute("src",`${createPath("lessons","start-page.md")}`)}.bind(this),this.getData().then(()=>this.shadow.getElementById("search-input").oninput=this.search.bind(this))}search(t){let e=this.shadow.getElementById("search-result");if(e.innerHTML="",!t.target.value){for(let t of this.menuOptions)this.show(t);for(let t of this.submenuOptions)this.show(t);return}let n=this.keywords.getAll(t.target.value.toLowerCase());if(0===n.length){e.innertext="Not found...";for(let t of this.menuOptions)this.hide(t);for(let t of this.submenuOptions)this.hide(t);return}let r=n.map(t=>JSON.parse(t));for(let t of this.menuOptions)r.find(e=>t.firstElementChild.id===e.lesson)?this.show(t):this.hide(t);for(let t of this.submenuOptions){let e=t.querySelector("a").textContent;r.find(t=>e===t.topic)?this.show(t):this.hide(t)}}addElem(t,e){return e.appendChild(document.createElement(t))}setStyles(){fetch("src/main-menu.css").then(t=>t.text()).then(t=>this.shadow.appendChild(document.createElement("style")).textContent=t)}hide(t){t.dispatchEvent(new Event("hide"))}show(t){t.dispatchEvent(new Event("show"))}hideCallback(t){t.target.style.display="none"}showCallback(t){t.target.style.display="block"}setListeners(t){t.addEventListener("show",this.showCallback),t.addEventListener("hide",this.hideCallback)}async getData(){this.menuData=await(await fetch("src/main-menu.json")).json(),this.keywords=new FormData;const t=this.shadow.querySelector("#menu");for(let e of this.menuData){let n=this.addElem("li",t);this.menuOptions.push(n),this.setListeners(n),n.innerHTML=this.getLessonTemplate(e.id),n.subLevel=n.querySelector("ul.sub-level");let r=0;for(let t of e.items){let i=this.addElem("li",n.subLevel);this.submenuOptions.push(i),this.setListeners(i),i.style["animation-delay"]=r++<10?`0.${r}s`:`1.${r-9}s`;let o=this.addElem("a",i);o.href=t.ref,o.textContent=t.title,o.fileName=t.ref,o.onclick=function(t){t.preventDefault(),this.checkbox.checked=!this.checkbox.checked,this.checkbox.dispatchEvent(new Event("click"));let e="js-lessons.glitch.me"===location.host?t.target.href:`?${t.target.fileName}`;window.history.pushState({route:e},t.target.innerText,e);let n=this.addElem("shutter-element",document.body);n.style="position: absolute; top: 0; left: 0;",setTimeout(()=>n.remove(),1e3),this.view.setAttribute("src",`${createPath("lessons",t.target.fileName+".md")}`)}.bind(this);for(let n of t.keywords)this.keywords.append(n,JSON.stringify({lesson:e.id,topic:t.title,url:t.ref}))}}}getLessonTemplate(t){return`<input type="radio" id="${t}" name="lessons">\n        <label for="${t}">\n          <div class = "icon"></div>\n          <b>${t}</b>\n        </label>\n        <ul class="sub-level"></ul>`}}customElements.define("main-menu-component",p);class l extends s{constructor(){super();let t=this.shadow.appendChild(document.createElement("style"));fetch(`${createPath("src","for-rainbow.css")}`).then(t=>t.text()).then(e=>t.textContent=e)}connectedCallback(){this.header=this.shadow.querySelector("#header"),this.wrapper=this.shadow.querySelector(".collapsible-content")}static get observedAttributes(){return["header","content"]}attributeChangedCallback(t,e,n){"content"===t?this.wrapper.appendChild(this.content):("header"===t||!n)&&(this.header.innerText=this.getAttribute("header"))}}customElements.define("script-spoiler",l);class c extends HTMLElement{constructor(){super();let t=this.attachShadow({mode:"closed"});t.appendChild(document.createElement("style")).textContent='\n    .logo-box {\n        position: absolute;\n        width: max-content;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        background-color: #000;\n        padding: 20px 20px 0 20px;\n        color: #fff;\n        font-family: "Poppins", Roboto, sans-serif;\n        // border-bottom: solid 1px #fff;\n        // border-right: solid 1px #fff;\n        box-shadow: 3px 3px 5px #00000080;\n        overflow: hidden;\n    }\n    .logo-box .over {\n      position: absolute;\n      top: 0;\n      margin: 20px 0;\n    }\n    .logo-box .noise {\n        position: absolute;\n        top: 50px;\n        left: 0px;\n        width: 10px;\n        height: 1px;\n        z-index: 5;\n        background-color: #00000080;\n        animation: glitch-noise 1s linear 0s infinite alternate;\n       overflow: hidden;\n    }\n    .logo-box .glitch {\n      color: #fff;\n      font-family: "Luckiest Guy", "Poppins", Roboto, sans-serif;\n      font-size: 80px;\n      letter-spacing: 4px;\n      position: relative;\n    }\n    .logo-box .glitch:before, .logo-box .glitch:after {\n      content: "JS";\n      color: #fff;\n      position: absolute;\n      top: 0;\n      overflow: hidden;\n    }\n    .logo-box .glitch:before {\n      left: 2.5px;\n      text-shadow: -2.5px 0 #f50;\n      animation: glitch-before 2s ease 0s infinite alternate;\n    }\n    .logo-box .glitch:after {\n      left: -2.5px;\n      text-shadow: -2.5px 0 #09b;\n      animation: glitch-after 2s ease 0s infinite alternate;\n    }\n\n    @keyframes glitch-before {\n      0% {\n        clip: rect(0px, 125px, 120px, 50px);\n      }\n      5% {\n        clip: rect(0px, 125px, 59px, 0px);\n      }\n      10% {\n        clip: rect(30px, 210px, 90px, 30px);\n      }\n      15% {\n        clip: rect(15px, 40px, 48px, 0px);\n      }\n      20% {\n        clip: rect(15px, 5px, 50px, 10px);\n      }\n      25% {\n        clip: rect(17px, 125px, 45px, 50px);\n      }\n      30% {\n        clip: rect(0px, 125px, 32px, 0px);\n      }\n      35% {\n        clip: rect(20px, 100px, 47px, 50px);\n      }\n      40% {\n        clip: rect(30px, 80px, 28px, 10px);\n      }\n      45% {\n        clip: rect(16px, 50px, 34px, 0px);\n      }\n      50% {\n        clip: rect(0px, 125px, 37px, 100px);\n      }\n      55% {\n        clip: rect(12px, 100px, 21px, 30px);\n      }\n      60% {\n        clip: rect(41px, 125px, 55px, 10px);\n      }\n      65% {\n        clip: rect(5px, 50px, 39px, 0px);\n      }\n      70% {\n        clip: rect(5px, 120px, 24px, 40px);\n      }\n      75% {\n        clip: rect(30px, 125px, 50px, 10px);\n      }\n      80% {\n        clip: rect(37px, 80px, 50px, 0px);\n      }\n      85% {\n        clip: rect(37px, 80px, 48px, 10px);\n      }\n      90% {\n        clip: rect(30px, 50px, 92px, 0px);\n      }\n      95% {\n        clip: rect(17px, 125px, 92px, 90px);\n      }\n      100% {\n        clip: rect(0px, 125px, 45px, 0px);\n      }\n    }\n    @keyframes glitch-after {\n      0% {\n        clip: rect(10px, 50px, 34px, 0px);\n      }\n      5% {\n        clip: rect(4px, 70px, 22px, 0px);\n      }\n      10% {\n        clip: rect(0px, 50px, 17px, 0px);\n      }\n      15% {\n        clip: rect(7px, 125px, 34px, 10px);\n      }\n      20% {\n        clip: rect(11px, 115px, 45px, 30px);\n      }\n      25% {\n        clip: rect(3px, 125px, 18px, 70px);\n      }\n      30% {\n        clip: rect(38px, 50px, 100px, 10px);\n      }\n      35% {\n        clip: rect(20px, 70px, 120px, 5px);\n      }\n      40% {\n        clip: rect(5px, 125px, 48px, 90px);\n      }\n      45% {\n        clip: rect(15px, 40px, 44px, 0px);\n      }\n      50% {\n        clip: rect(21px, 80px, 37px, 10px);\n      }\n      55% {\n        clip: rect(14px, 125px, 40px, 40px);\n      }\n      60% {\n        clip: rect(16px, 50px, 30px, 8px);\n      }\n      65% {\n        clip: rect(50px, 125px, 120px, 50px);\n      }\n      70% {\n        clip: rect(10px, 70px, 44px, 40px);\n      }\n      75% {\n        clip: rect(70px, 100px, 49px, 30px);\n      }\n      80% {\n        clip: rect(13px, 120px, 120px, 90px);\n      }\n      85% {\n        clip: rect(35px, 80px, 90px, 30px);\n      }\n      90% {\n        clip: rect(5px, 80px, 35px, 20px);\n      }\n      95% {\n        clip: rect(30px, 125px, 120px, 10px);\n      }\n      100% {\n        clip: rect(50px, 50px, 110px, 0px);\n      }\n    }\n    @keyframes glitch-noise {\n      0% { top: 30px; left: 25px; width: 10px; }\n      5% { top: 90px; left: 110px; width: 20px; }\n      10% { top: 40px; left: 50px; width: 5px; }\n      15% { top: 90px; left: 20px; width: 20px; }\n      20% { top: 50px; left: 110px; width: 5px; }\n      25% { top: 90px; left: 30px; width: 20px; }\n      30% { top: 90px; left: 110px; width: 10px; }\n      35% { top: 40px; left: 50px; width: 5px; }\n      40% { top: 90px; left: 40px; width: 20px; }\n      45% { top: 50px; left: 110px; width: 5px; }\n      50% { top: 30px; left: 50px; width: 10px; }\n      55% { top: 70px; left: 30px; width: 20px; }\n      60% { top: 90px; left: 110px; width: 5px; }\n      65% { top: 40px; left: 110px; width: 20px; }\n      70% { top: 50px; left: 50px;  width: 10px; }\n      75% { top: 90px; left: 50px; width: 20px; }\n      80% { top: 30px; left: 70px; width: 5px; }\n      85% { top: 90px; left: 80px; width: 10px; }\n      90% { top: 50px; left: 40px; width: 5px; }\n      95% { top: 40px; left: 70px; width: 20px; }\n      100% { top: 30px; left: 50px; width: 5px; }\n    }\n    ',t.innerHTML+='\n      <div class="logo-box">\n        <span class="over">Client-side</span>\n        <span class="glitch">JS</span>\n        <span class="noise"></span>\n      </div>\n    '}}customElements.define("glitch-logo",c);n(7),n(8);class h extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"closed"}),this.polygones=[]}connectedCallback(){this.shadow.appendChild(document.createElement("style")).textContent="\n            main {\n                position: absolute;\n                width: 100vw;\n                height: 100vh;\n                margin: 0;\n                padding: 0;\n                overflow:hidden;\n                box-sizing: border-box;\n            }\n            section {\n                position: relative;\n                width: 100%;\n                overflow: hidden;\n                margin: 0;\n                padding: 0;\n            }\n            figure {\n                position: absolute;\n                display: inline-block;\n                background-color: #444;\n                height: 100%;\n                margin: 0;\n                animation-fill-mode: forwards;\n                background: #00000090;\n                box-shadow: 2px 2px 4px #00000070;\n            }\n            .right-figure {\n                right: -100%;\n                box-shadow: -2px 2px 4px #00000070;\n            }\n            .left-figure {\n                left: -100%;\n                box-shadow: 2px 2px 4px #00000070;\n            }\n            @keyframes movie-left {\n                0%   { left: -100%; }\n                45%  { left: 0%; }\n                55%  { left: 0%; }\n                100% { left: -100%; }\n            }\n            @keyframes movie-right {\n                0%   { right: -100%; }\n                45%  { right: 0%; }\n                55%  { right: 0%; }\n                100% { right: -100%; }\n            }\n        ";let t=this.createElem("main",this.shadow);this.createPolygones(t),this.polygones.forEach(t=>t.forEach(t=>t.style["animation-name"]=t.movie))}getSegmentHeight(t){return t>50?Math.max(50,Math.min(150,Math.random()*t)):t}getRandomColor(){return`rgba(\n                    ${Math.round(200*Math.random())},\n                    ${Math.round(200*Math.random())},\n                    ${Math.round(200*Math.random())},\n                    0.8)`}createElem(t,e){return e.appendChild(document.createElement(t))}createFigure(t,e){let n=this.createElem("figure",t);return e&&(n.className=e),n}createPolygones(t){Math.max(5,Math.round(10*Math.random()));let e=t.offsetHeight;do{let n=this.getSegmentHeight(e),r=this.createElem("section",t);r.style.height=n+"px",e-=n;let i=Math.round(Math.max(.3,Math.min(Math.random(),.7))*r.offsetWidth),o=this.createFigure(r,"left-figure"),s=this.createFigure(r,"right-figure");o.style["animation-duration"]=s.style["animation-duration"]=Math.max(.5,Math.random())+"s",o.movie="movie-left",s.movie="movie-right",o.style.width=i+"px",s.style.width=r.offsetWidth-i+"px",this.polygones.push([o,s])}while(e>0)}}customElements.define("shutter-element",h);class d extends HTMLElement{constructor(){super(),this.normalState=[-100,0,300,0],this.currentState=[-100,0,300,0],this.hoverState=[20,70,80,70],this.defs='\n                <defs>\n                    <filter id="shadow" x="0" y="0" width="300%" height="300%">\n                      <feOffset result="offOut" in="SourceAlpha" dx="1" dy="1" />\n                      <feGaussianBlur result="blurIn" in="offOut" stdDeviation="7" />\n                      <feBlend in="SourceGraphic" in2="blurOut" mode="normal" />\n                    </filter>\n                    <pattern id="picture" patternUnits="userSpaceOnUse" width="100" height="100">\n                        <image xlink:href="https://cdn.glitch.com/a4e0a9fd-ea7b-47cf-b52a-48fd6359c559%2Fstars-5.gif" x="0" y="-50" width="100" height="200" />\n                    </pattern>\n                </defs>\n        ',this.shadow=this.attachShadow({mode:"closed"}),this.shadow.innerHTML=`\n            <svg viewBox="0 0 150 150" xmlns="http://www.w3.org/2000/svg">\n                ${this.defs}\n      \t\t\t<path d="M-50 0 C ${this.currentState[0]} ${this.currentState[1]}, ${this.currentState[2]} ${this.currentState[3]}, 250 0" filter="url(#shadow)" fill="url(#picture)" />\n    \t\t</svg>\n        `}connectedCallback(){this.svg=this.shadow.querySelector("svg"),this.path=this.shadow.querySelector("path"),this.shadow.appendChild(document.createElement("style")).textContent="\n            svg {\n                position: fixed;\n                top: 0;\n                height: 50px;\n                left: 0;\n                width: 100vw;\n                background: var(--header-back-color);\n                box-shadow: 3px 3px 5px #00000070;\n            }\n            svg > path {\n                fill: url(#picture);\n                stroke: none;\n            }\n            h3 {\n              font-family: var(--funy-font);\n              color: #f50;\n            }\n\n            @media screen and (max-width: 480px), screen and (max-height: 480px) {\n                svg, h3 {\n                  display: none;\n                }\n            }\n        ",this.svg.onpointerdown=this.change.bind(this,"hoverState"),this.svg.onpointerup=this.change.bind(this,"normalState"),this.svg.addEventListener("pointerdown",this.changeSVGsize),this.svg.addEventListener("pointerup",function(t){return t.preventDefault(),t.stopPropagation(),t.cancelBubble=!0,t.returnValue=!1,!1}),window.oncontextmenu=function(t){return t.preventDefault(),t.stopPropagation(),!1}}changeSVGsize(t){t.target.style.height="80vh",t.target.style.background="var(--back-transparent)",t.target.style.boxShadow="none"}animate(){let t=this.currentState[0],e=this.currentState[1],n=this.currentState[2],r=this.currentState[3];this.svg.innerHTML=`\n            ${this.defs}\n            <path d="M-150 0 C ${t} ${e}, ${n} ${r}, 300 0" filter="url(#f1)"/>\n            \x3c!-- <image xlink:href="https://yokoent.com/images/fingerprint-png-green-3.png" width="20%" height="20%" x="50" y="20" /> --\x3e\n        `,this.change.call(this,arguments[0])}change(){let t=0;for(let e=0;e<this.currentState.length;e++){let n=this[arguments[0]][e]-this.currentState[e];this.currentState[e]+=n<0?-1:n>0?1:0,t+=Math.abs(n)}0!==t?requestAnimationFrame(this.animate.bind(this,arguments[0])):"normalState"===arguments[0]?(this.svg.style.height="50px",this.svg.style.background="var(--header-back-color)",this.svg.style.boxShadow="5px 5px 10px #00000070"):this.svg.innerHTML+='<image xlink:href="https://yokoent.com/images/fingerprint-png-green-3.png" width="20%" height="20%" x="50" y="20" />'}disconnectedCallback(){console.log("GraphicHeaderComponent was disconnected!")}}customElements.define("graphic-header",d);n(9),n(11),n(13),n(14);class u extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"closed"}),this.shadow.innerHTML='\n          <div class="box">\n              <div class="content">\n                <slot name="left"></slot>\n                <slot name="right"></slot>\n              </div>\n          </div>\n        ',this.box=this.shadow.querySelector(".box"),this.content=this.shadow.querySelector(".content")}connectedCallback(){this.shadow.appendChild(document.createElement("style")).textContent='\n        @charset "UTF-8";\n        * {\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          user-select: none;\n        }\n        .box {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            color: #fff;\n            width: -webkit-fit-content;\n            width: -moz-fit-content;\n            width: fit-content;\n            height: -webkit-fit-content;\n            height: -moz-fit-content;\n            height: fit-content;\n            transform-style: preserve-3d;\n            transition: 0.5s ease;\n            perspective: 300px;\n            box-sizing: border-box;\n            padding: 20px 0 20px 20px;\n            font-family: "Montserrat", "Roboto", Arial;\n            line-height: 1.5rem;\n        }\n        .box > .content {\n            position: relative;\n        \t  background: #000;\n            background-image: linear-gradient(to right, #000 70%, transparent 100%),\n                              var(--stars), var(--icon);\n            background-position: left, right, right bottom;\n            background-repeat:no-repeat, repeat, no-repeat;\n            background-size: cover, contain, 100px;\n            top: 20px;\n            bottom: 10px;\n            box-sizing: border-box;\n            left: -30px;\n            width: 50vw;\n            height: fit-content;\n            padding: 20px 40px 20px 20px;\n            transition: 0.5s ease;\n            border: solid 5px #fff;\n            box-shadow: 5px 5px 10px #00000070;\n            text-align: justify;\n            text-indent: 24px;\n            font-size: 0.8rem;\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            align-items:flex-end;\n        }\n\n        .box:before, .box:after {\n            content: "";\n            position: absolute;\n            width: calc(100% - 80px);\n            height: 100%;\n        }\n        .box:before {\n            border-top: 10px solid #f50;\n            border-left: 10px solid #f50;\n            box-shadow: inset 3px 3px 6px #00000070;\n        }\n        .box:after {\n            top: 30px;\n            border-bottom: 10px solid #f50;\n            border-right: 10px solid #f50;\n            box-shadow: 8px 8px 12px #00000070;\n        }\n\n        .box:hover {\n            transform: translate(-50%, -50%) rotateY(-4deg) skew(-10deg);\n        }\n        .box:hover > .content {\n            transform: rotateY(8deg) skew(20deg);\n        }\n\n        @media screen and (max-width: 800px ) {\n            .box > .content { width: 60vw; }\n        }\n\n        @media screen and (max-width: 600px ) {\n            .box > .content { width: 70vw; }\n        }\n\n        @media screen and (max-width: 480px ) {\n            .box > .content { width: 80vw; }\n            .box { transform: translate(-45%, -50%); }\n        }\n\n        @media screen and (max-width: 360px ) {\n            .box > .content { width: 90vw; }\n            .box { transform: translate(-40%, -50%); }\n        }\n\n        small {\n          color: #0df;\n        }\n        .content p {\n          width: max-content;\n        }',this.onclick=t=>t.target.remove()}static get observedAttributes(){return["content"]}attributeChangedCallback(t,e,n){n&&(this.content.innerHTML=n)}}customElements.define("popup-win",u)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,